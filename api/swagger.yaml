openapi: 3.0.1
info:
  title: Fluidcoins Pay api documentation
  description: "A suite of APIs to create, manage and accept cryptocurrency payments\
    \ in Africa"
  contact:
    name: Developers' Support
    url: https://developers.fluidcoins.com
    email: developers@fluidcoins.com
  version: 0.1.5
servers:
- url: //api.fluidcoins.com/v1
paths:
  /address:
    get:
      tags:
      - address
      summary: List addresses
      parameters:
      - name: page
        in: query
        description: Page to query data from. Defaults to 1
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number to items to return. Defaults to 20 items
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: coin_id
        in: query
        description: fetch addresses for a specific coin. Must be a uuid and you can
          fetch the id of the coin by using the v1/currencies endpoint
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.addressListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    post:
      tags:
      - address
      summary: Create a new address
      requestBody:
        description: Coin data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.generateCoinRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.addressResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /address/{id}:
    get:
      tags:
      - address
      summary: Fetch an address
      parameters:
      - name: id
        in: path
        description: address unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.addressResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /address/{id}/transactions:
    get:
      tags:
      - address
      summary: List transactions for a given address
      parameters:
      - name: page
        in: query
        description: Page to query data from. Defaults to 1
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number to items to return. Defaults to 20 items
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: id
        in: path
        description: address unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.addressTransactionsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /address/transactions/{id}:
    get:
      tags:
      - address
      summary: Fetch a single transaction that occurred on a given address
      parameters:
      - name: id
        in: path
        description: transaction reference
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.addressTransactionResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /balances:
    get:
      tags:
      - balances
      summary: Fetch all balances of a merchant
      description: This endpoint is used to retrieve all balances of a merchant.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.merchantBalanceResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      security:
      - ApiKeyAuth: []
  /compliance/setup:
    get:
      tags:
      - dashboard
      summary: Fetch all data used during compliance
      description: This endpoint provides a way to fetch multiple datasets a business
        will need to select
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.complianceDataResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      security:
      - ApiKeyAuth: []
  /currencies:
    get:
      tags:
      - currencies
      summary: List currencies
      parameters:
      - name: test_net_only
        in: query
        description: Retrieve only coins that have a test-net network
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.currenciesListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /customers:
    get:
      tags:
      - customers
      summary: List customers
      parameters:
      - name: page
        in: query
        description: Page to query data from. Defaults to 1
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number to items to return. Defaults to 20 items
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: blacklisted
        in: query
        description: Fetch blacklisted customers
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.customerListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    post:
      tags:
      - customers
      summary: Create a new customer
      requestBody:
        description: Customer data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.customerCreateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.customerCreateResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /customers/{id}:
    get:
      tags:
      - customers
      summary: Fetch a customer
      parameters:
      - name: id
        in: path
        description: customer unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.customerRetrievalResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    patch:
      tags:
      - customers
      summary: Edit a customer
      parameters:
      - name: id
        in: path
        description: Customer unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Customer data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.customerEditRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.customerRetrievalResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /customers/{id}/blacklist:
    post:
      tags:
      - customers
      summary: Blacklists a customer
      parameters:
      - name: id
        in: path
        description: Customer unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.customerRetrievalResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    delete:
      tags:
      - customers
      summary: Whitelists a customer
      parameters:
      - name: id
        in: path
        description: Customer unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.customerRetrievalResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /dashboard:
    get:
      tags:
      - dashboard
      summary: Fetch dashboard data
      description: This endpoint is used to retrieve all data for the home page
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.homeResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      security:
      - ApiKeyAuth: []
  /hooks:
    get:
      tags:
      - webhooks
      summary: List webhook endpoints. Only 5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listWebhookResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    post:
      tags:
      - webhooks
      summary: Create a new webhook. Limited to only 5 endpoints
      description: You can only create a maximum of 5 endpoints. Each endpoint
      requestBody:
        description: hook data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.webhookCreateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.webhookCreateResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /hooks/{id}:
    get:
      tags:
      - webhooks
      summary: Fetch an endpoint details
      parameters:
      - name: id
        in: path
        description: hook unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.webhookCreateResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    patch:
      tags:
      - webhooks
      summary: Edit a webhook
      description: This endpoint allows you to update the url for a webhook endpoint
        while retaining the same secret/signing key
      parameters:
      - name: id
        in: path
        description: Webhook unique id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: webhook data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.webhookCreateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.webhookCreateResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /hooks/{id}/enable:
    post:
      tags:
      - webhooks
      summary: Mark an endpoint as active.
      description: Mark an endpoint as the default. Please not that this will
      parameters:
      - name: id
        in: path
        description: hook unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.webhookCreateResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    delete:
      tags:
      - webhooks
      summary: Disable an endpoint from receiving webhooks
      parameters:
      - name: id
        in: path
        description: hook unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.webhookCreateResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /keys:
    get:
      tags:
      - developer
      summary: Fetch API keys
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.apiKeysResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /keys/rotate:
    post:
      tags:
      - developer
      summary: Rotate API keys
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.apiKeysResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /links:
    get:
      tags:
      - links
      summary: List payment links
      parameters:
      - name: page
        in: query
        description: Page to query data from. Defaults to 1
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number to items to return. Defaults to 10 items
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.customerListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    post:
      tags:
      - links
      summary: Create a new payment link
      requestBody:
        description: Payment link data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.linkCreateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.paymentLinkCreateResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /links/{id}:
    get:
      tags:
      - links
      summary: Fetch a payment link
      parameters:
      - name: id
        in: path
        description: Link unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.paymentLinkRetrievalResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    patch:
      tags:
      - links
      summary: Edit payment link
      parameters:
      - name: id
        in: path
        description: Link unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: link data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.linkEditRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.paymentLinkRetrievalResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /links/{id}/enable:
    post:
      tags:
      - links
      summary: Enable a payment link for collection
      parameters:
      - name: id
        in: path
        description: payment link unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.paymentLinkRetrievalResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    delete:
      tags:
      - links
      summary: Disable a payment link for collection
      parameters:
      - name: id
        in: path
        description: payment link unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.paymentLinkRetrievalResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /links/{id}/transactions:
    get:
      tags:
      - links
      summary: List transactions that belong to a payment link
      parameters:
      - name: id
        in: path
        description: Link unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.customerListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /merchant:
    get:
      tags:
      - merchant
      summary: Fetch the current merchant
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.merchantCreationResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /payouts:
    get:
      tags:
      - payouts
      summary: List payouts
      parameters:
      - name: page
        in: query
        description: Page to query data from. Defaults to 1
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number to items to return. Defaults to 20 items
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.payoutListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    post:
      tags:
      - payouts
      summary: Request for a payout
      requestBody:
        description: payout request data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createRequestPayout'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.payoutRequestResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /payouts/{id}:
    get:
      tags:
      - payouts
      summary: Fetch the details of a payout
      parameters:
      - name: id
        in: path
        description: Payout unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.payoutRequestResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    delete:
      tags:
      - payouts
      summary: Cancel a payout.
      description: "payouts work like a state machine. From requested to pending to\
        \ processed. While a payout is still in requested state, you can cancel it\
        \ from being executed"
      parameters:
      - name: id
        in: path
        description: Payout unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.payoutRequestResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /payouts/accounts:
    get:
      tags:
      - payouts
      summary: List payouts accounts
      parameters:
      - name: page
        in: query
        description: Page to query data from. Defaults to 1
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number to items to return. Defaults to 20 items
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.payoutAccountsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    post:
      tags:
      - payouts
      summary: Create a new payout account
      description: create a transfer recipient and store the account ID so you can
        send money to the account whenever
      requestBody:
        description: payout data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createPayoutAccountRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createPayoutAccountResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /payouts/accounts/banks:
    get:
      tags:
      - payouts
      summary: List banks
      parameters:
      - name: country
        in: query
        description: Optional. Defaults to NG
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.bankListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /payouts/accounts/banks/resolve:
    get:
      tags:
      - payouts
      summary: Resolve bank accounts
      parameters:
      - name: bank_code
        in: query
        description: Sort code of the bank
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: account
        in: query
        description: Bank account number
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.resolveBankAccountResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /rates:
    get:
      tags:
      - currencies
      summary: fetch fiat exchange rates
      description: "fetch a list of the current exchange rate of all supported fiat\
        \ currencies on Fluidcoins. If you provide both to and from query params,\
        \ we will return only that currency pair."
      parameters:
      - name: from
        in: query
        description: base currency to convert from
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: to
        in: query
        description: currency you want to covert to
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.ratesResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /settings/password:
    post:
      tags:
      - settings
      summary: Update your password
      requestBody:
        description: Password data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.updatePasswordRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.merchantUserResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /settings/preferences:
    get:
      tags:
      - settings
      summary: Fetch preferences
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.preferencesResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
    patch:
      tags:
      - settings
      summary: Update preferences
      requestBody:
        description: preferences data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.preferenceUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.preferencesResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /settings/profile:
    patch:
      tags:
      - settings
      summary: Update your user profile
      requestBody:
        description: user profile request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.updateUserProfileRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.merchantUserResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
      x-codegen-request-body-name: message
  /settings/toggle-domain:
    post:
      tags:
      - settings
      summary: Switch your dashboard domain from test to live and viceversa
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.merchantCreationResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /transactions:
    get:
      tags:
      - transactions
      summary: List transactions
      parameters:
      - name: page
        in: query
        description: Page to query data from. Defaults to 1
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number to items to return. Defaults to 20 items
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: status
        in: query
        description: "Filter transactions. Defaults to all,  accepted values are pending,failed,success"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.transactionsListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
  /transactions/{id}:
    get:
      tags:
      - transactions
      summary: Fetch a single transaction
      parameters:
      - name: id
        in: path
        description: Unique ID for the transaction
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.transactionItemResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIError'
components:
  schemas:
    merchant.APIKey:
      type: object
      properties:
        created_at:
          type: string
        domain:
          type: string
        id:
          type: string
        key_type:
          type: integer
        merchant_id:
          type: string
        updated_at:
          type: string
        value:
          type: string
      example:
        key_type: 0
        updated_at: updated_at
        domain: domain
        created_at: created_at
        id: id
        merchant_id: merchant_id
        value: value
    merchant.Address:
      type: object
      properties:
        address:
          type: string
        coin:
          $ref: '#/components/schemas/merchant.MerchantCoin'
        created_at:
          type: string
        domain:
          type: string
        id:
          type: string
        merchant_id:
          type: string
        metadata:
          $ref: '#/components/schemas/merchant.CoinMetadata'
        reference:
          type: string
          description: |-
            Refernece is the unique ID for this address. You can use this id to
            fetch the address again
        updated_at:
          type: string
      example:
        reference: reference
        metadata:
          memo: memo
          destination_tag: 5
          network: network
        address: address
        updated_at: updated_at
        domain: domain
        created_at: created_at
        id: id
        merchant_id: merchant_id
        coin:
          image: image
          metadata:
            minimum_payout_amount: 6
            minimum_deposit_amount: 0
            payout_fee: 1
          code: code
          updated_at: updated_at
          has_test_net: true
          is_available_on_widget: true
          is_stable_coin: true
          created_at: created_at
          human_readable_name: human_readable_name
          id: id
          networks:
          - networks
          - networks
          is_fiat: true
    merchant.AddressMetadata:
      type: object
      properties:
        block_hash:
          type: string
        block_height:
          type: integer
        from:
          type: string
          description: |-
            The sender address. This field will not be available for all
            blockchains
      example:
        block_hash: block_hash
        from: from
        block_height: 6
    merchant.AddressTransaction:
      type: object
      properties:
        amount:
          type: integer
        coin:
          $ref: '#/components/schemas/merchant.MerchantCoin'
        created_at:
          type: string
        domain:
          type: string
        hash:
          type: string
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/merchant.AddressMetadata'
        payment_address_id:
          type: string
        reference:
          type: string
        updated_at:
          type: string
      example:
        reference: reference
        amount: 0
        metadata:
          block_hash: block_hash
          from: from
          block_height: 6
        updated_at: updated_at
        domain: domain
        payment_address_id: payment_address_id
        created_at: created_at
        id: id
        hash: hash
        coin:
          image: image
          metadata:
            minimum_payout_amount: 6
            minimum_deposit_amount: 0
            payout_fee: 1
          code: code
          updated_at: updated_at
          has_test_net: true
          is_available_on_widget: true
          is_stable_coin: true
          created_at: created_at
          human_readable_name: human_readable_name
          id: id
          networks:
          - networks
          - networks
          is_fiat: true
    merchant.Bank:
      type: object
      properties:
        code:
          type: string
        country:
          type: string
        name:
          type: string
      example:
        country: country
        code: code
        name: name
    merchant.BankPayoutAccount:
      type: object
      properties:
        account_name:
          type: string
        account_number:
          type: string
        bank_code:
          type: string
        bank_name:
          type: string
        currency:
          type: string
        metadata:
          $ref: '#/components/schemas/merchant.BankPayoutAccountMetadata'
      example:
        account_number: account_number
        bank_code: bank_code
        metadata: {}
        account_name: account_name
        bank_name: bank_name
        currency: currency
    merchant.BankPayoutAccountMetadata:
      type: object
    merchant.CoinMetadata:
      type: object
      properties:
        destination_tag:
          type: integer
          description: XRP addresses must have a destination tag
        memo:
          type: string
          description: XLM requires a memo
        network:
          type: string
          description: "can be erc20, trc20 or bsc\nif empty, then assume the default\
            \ chain\nin cases such as btc,ltc and what not"
      example:
        memo: memo
        destination_tag: 5
        network: network
    merchant.Country:
      type: object
      properties:
        code:
          type: string
        english_name:
          type: string
        id:
          type: string
      example:
        code: code
        id: id
        english_name: english_name
    merchant.CryptoPayoutAccount:
      type: object
      properties:
        address:
          type: string
        coin:
          type: string
        label:
          type: string
        network:
          type: string
      example:
        address: address
        label: label
        coin: coin
        network: network
    merchant.Industry:
      type: object
      properties:
        created_at:
          type: string
        id:
          type: string
        industry_name:
          type: string
        updated_at:
          type: string
      example:
        industry_name: industry_name
        updated_at: updated_at
        created_at: created_at
        id: id
    merchant.Merchant:
      type: object
      properties:
        business_name:
          type: string
        country:
          $ref: '#/components/schemas/merchant.Country'
        country_id:
          type: string
        created_at:
          type: string
        dashboard_domain:
          type: string
          description: |-
            This is what we show on the dashboard.
            Does not determine anything else like if the merchant has gone into
            live mode or can accept payments
        description:
          type: string
        id:
          type: string
        industry_id:
          type: string
        metadata:
          $ref: '#/components/schemas/merchant.MerchantMetadata'
        updated_at:
          type: string
        verification_status:
          type: integer
        verification_type:
          type: integer
      example:
        business_name: business_name
        country:
          code: code
          id: id
          english_name: english_name
        industry_id: industry_id
        metadata:
          webhook_application_id: webhook_application_id
          live_webhook_application_id: live_webhook_application_id
          plan:
            percentage: 0
          email: email
        dashboard_domain: dashboard_domain
        updated_at: updated_at
        created_at: created_at
        description: description
        verification_type: 1
        id: id
        verification_status: 6
        country_id: country_id
    merchant.MerchantCoin:
      type: object
      properties:
        code:
          type: string
        created_at:
          type: string
        has_test_net:
          type: boolean
        human_readable_name:
          type: string
        id:
          type: string
        image:
          type: string
          description: This is a base64 encoded image not an actual url resource
        is_available_on_widget:
          type: boolean
          description: |-
            IsAvailableOnWidget determines if this currency coin is a payment
            option on our widget
        is_fiat:
          type: boolean
        is_stable_coin:
          type: boolean
        metadata:
          $ref: '#/components/schemas/merchant.MerchantCoin_metadata'
        networks:
          type: array
          items:
            type: string
            description: "erc20,trc20,bsc and others"
        updated_at:
          type: string
      example:
        image: image
        metadata:
          minimum_payout_amount: 6
          minimum_deposit_amount: 0
          payout_fee: 1
        code: code
        updated_at: updated_at
        has_test_net: true
        is_available_on_widget: true
        is_stable_coin: true
        created_at: created_at
        human_readable_name: human_readable_name
        id: id
        networks:
        - networks
        - networks
        is_fiat: true
    merchant.MerchantCustomer:
      type: object
      properties:
        created_at:
          type: string
        domain:
          type: string
        email:
          type: string
        full_name:
          type: string
        id:
          type: string
        is_blacklisted:
          type: boolean
        merchant_id:
          type: string
        phone_number:
          type: string
        reference:
          type: string
        updated_at:
          type: string
      example:
        reference: reference
        full_name: full_name
        updated_at: updated_at
        domain: domain
        created_at: created_at
        is_blacklisted: true
        phone_number: phone_number
        id: id
        merchant_id: merchant_id
        email: email
    merchant.MerchantMetadata:
      type: object
      properties:
        email:
          type: string
        live_webhook_application_id:
          type: string
        plan:
          $ref: '#/components/schemas/merchant.Plan'
        webhook_application_id:
          type: string
          description: here for legacy reasons. it is the test app id really
      example:
        webhook_application_id: webhook_application_id
        live_webhook_application_id: live_webhook_application_id
        plan:
          percentage: 0
        email: email
    merchant.MerchantRole:
      type: object
      properties:
        counter:
          type: integer
        created_at:
          type: string
        id:
          type: string
        merchant_id:
          type: string
        role:
          type: integer
        updated_at:
          type: string
        user_id:
          type: string
      example:
        role: 5
        updated_at: updated_at
        user_id: user_id
        created_at: created_at
        counter: 5
        id: id
        merchant_id: merchant_id
    merchant.MerchantUser:
      type: object
      properties:
        country:
          $ref: '#/components/schemas/merchant.Country'
        country_id:
          type: string
        created_at:
          type: string
        email:
          type: string
        full_name:
          type: string
        id:
          type: string
        is_active:
          type: boolean
        is_email_verified:
          type: boolean
        password:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/merchant.MerchantRole'
        updated_at:
          type: string
      example:
        country: null
        password: password
        full_name: full_name
        is_active: true
        updated_at: updated_at
        is_email_verified: true
        roles:
        - role: 5
          updated_at: updated_at
          user_id: user_id
          created_at: created_at
          counter: 5
          id: id
          merchant_id: merchant_id
        - role: 5
          updated_at: updated_at
          user_id: user_id
          created_at: created_at
          counter: 5
          id: id
          merchant_id: merchant_id
        created_at: created_at
        id: id
        country_id: country_id
        email: email
    merchant.MerchantWallet:
      type: object
      properties:
        amount:
          type: integer
        coin:
          $ref: '#/components/schemas/merchant.MerchantCoin'
        coin_id:
          type: string
        created_at:
          type: string
        domain:
          type: string
        id:
          type: string
        merchant_id:
          type: string
        updated_at:
          type: string
      example:
        amount: 0
        coin_id: coin_id
        updated_at: updated_at
        domain: domain
        created_at: created_at
        id: id
        merchant_id: merchant_id
        coin:
          image: image
          metadata:
            minimum_payout_amount: 6
            minimum_deposit_amount: 0
            payout_fee: 1
          code: code
          updated_at: updated_at
          has_test_net: true
          is_available_on_widget: true
          is_stable_coin: true
          created_at: created_at
          human_readable_name: human_readable_name
          id: id
          networks:
          - networks
          - networks
          is_fiat: true
    merchant.PaymentAddress:
      type: object
      properties:
        address:
          type: string
        coin:
          $ref: '#/components/schemas/merchant.MerchantCoin'
        created_at:
          type: string
        domain:
          type: string
        id:
          type: string
        merchant_id:
          type: string
        metadata:
          $ref: '#/components/schemas/merchant.CoinMetadata'
        reference:
          type: string
          description: |-
            Refernece is the unique ID for this address. You can use this id to
            fetch the address again
        transaction:
          $ref: '#/components/schemas/merchant.Transaction'
        updated_at:
          type: string
      example:
        reference: reference
        metadata:
          memo: memo
          destination_tag: 5
          network: network
        address: address
        updated_at: updated_at
        domain: domain
        created_at: created_at
        id: id
        merchant_id: merchant_id
        transaction:
          reference: reference
          amount: 5
          metadata:
            widget_coins:
            - amount: 1
              code: code
              human_readable_amount: human_readable_amount
              fiat_exchange_rate: 1
              is_stable_coin: true
              logo: logo
              human_readable_name: human_readable_name
              networks:
              - address: address
                name: name
                memo: memo
                destination_tag: 1
              - address: address
                name: name
                memo: memo
                destination_tag: 1
            - amount: 1
              code: code
              human_readable_amount: human_readable_amount
              fiat_exchange_rate: 1
              is_stable_coin: true
              logo: logo
              human_readable_name: human_readable_name
              networks:
              - address: address
                name: name
                memo: memo
                destination_tag: 1
              - address: address
                name: name
                memo: memo
                destination_tag: 1
            data: {}
            is_widget_payment: true
            provider: provider
            fee:
              amount: 2
              currency: currency
            ip: ip
            payment:
              amount: 9
              refund_status: 7
              human_readable_amount: 2.027123023002322
              refund_amount: 4
              coin: 3
            onchain:
              to_address: to_address
              confirmations: 7
              from_address: from_address
              hash: hash
              coin: coin
          updated_at: updated_at
          payment_link_id: payment_link_id
          domain: domain
          created_at: created_at
          id: id
          customer:
            reference: reference
            full_name: full_name
            updated_at: updated_at
            domain: domain
            created_at: created_at
            is_blacklisted: true
            phone_number: phone_number
            id: id
            merchant_id: merchant_id
            email: email
          status: status
        coin:
          image: image
          metadata:
            minimum_payout_amount: 6
            minimum_deposit_amount: 0
            payout_fee: 1
          code: code
          updated_at: updated_at
          has_test_net: true
          is_available_on_widget: true
          is_stable_coin: true
          created_at: created_at
          human_readable_name: human_readable_name
          id: id
          networks:
          - networks
          - networks
          is_fiat: true
    merchant.PaymentLink:
      type: object
      properties:
        amount:
          type: integer
          description: "Can be zero. If zero, the user has to select the amount to\
            \ pay"
        created_at:
          type: string
        description:
          type: string
        domain:
          type: string
        id:
          type: string
        identifier:
          type: string
        is_enabled:
          type: boolean
        merchant_id:
          type: string
        metadata:
          $ref: '#/components/schemas/merchant.PaymentLinkMetadata'
        title:
          type: string
        updated_at:
          type: string
      example:
        is_enabled: true
        identifier: identifier
        amount: 0
        metadata:
          collect_phone_number: true
        updated_at: updated_at
        domain: domain
        created_at: created_at
        description: description
        id: id
        merchant_id: merchant_id
        title: title
    merchant.PaymentLinkMetadata:
      type: object
      properties:
        collect_phone_number:
          type: boolean
      example:
        collect_phone_number: true
    merchant.Payout:
      type: object
      properties:
        amount:
          type: integer
        coin_id:
          type: string
        created_at:
          type: string
        domain:
          type: string
        id:
          type: string
        merchant_id:
          type: string
        metadata:
          $ref: '#/components/schemas/merchant.PayoutMetadata'
        reference:
          type: string
        status:
          type: integer
          description: This will be automatically updated based on payout attempts
        type:
          type: integer
        updated_at:
          type: string
      example:
        reference: reference
        amount: 0
        metadata:
          bank:
            account_number: account_number
            bank_code: bank_code
            metadata: {}
            account_name: account_name
            bank_name: bank_name
            currency: currency
          fee:
            amount: 6
            coin: 1
          crypto:
            address: address
            label: label
            coin: coin
            network: network
        coin_id: coin_id
        updated_at: updated_at
        domain: domain
        created_at: created_at
        id: id
        merchant_id: merchant_id
        type: 5
        status: 5
    merchant.PayoutAccount:
      type: object
      properties:
        bank:
          $ref: '#/components/schemas/merchant.BankPayoutAccount'
        coin_id:
          type: string
        created_at:
          type: string
        crypto:
          $ref: '#/components/schemas/merchant.CryptoPayoutAccount'
        domain:
          type: string
        id:
          type: string
        merchant_id:
          type: string
        payout_type:
          type: integer
        reference:
          type: string
        updated_at:
          type: string
      example:
        reference: reference
        bank:
          account_number: account_number
          bank_code: bank_code
          metadata: {}
          account_name: account_name
          bank_name: bank_name
          currency: currency
        coin_id: coin_id
        updated_at: updated_at
        domain: domain
        created_at: created_at
        payout_type: 0
        id: id
        merchant_id: merchant_id
        crypto:
          address: address
          label: label
          coin: coin
          network: network
    merchant.PayoutFee:
      type: object
      properties:
        amount:
          type: integer
        coin:
          type: integer
      example:
        amount: 6
        coin: 1
    merchant.PayoutMetadata:
      type: object
      properties:
        bank:
          $ref: '#/components/schemas/merchant.BankPayoutAccount'
        crypto:
          $ref: '#/components/schemas/merchant.CryptoPayoutAccount'
        fee:
          $ref: '#/components/schemas/merchant.PayoutFee'
      example:
        bank:
          account_number: account_number
          bank_code: bank_code
          metadata: {}
          account_name: account_name
          bank_name: bank_name
          currency: currency
        fee:
          amount: 6
          coin: 1
        crypto:
          address: address
          label: label
          coin: coin
          network: network
    merchant.Plan:
      type: object
      properties:
        percentage:
          type: integer
      example:
        percentage: 0
    merchant.Preferences:
      type: object
      properties:
        domain:
          type: string
        merchant_id:
          type: string
        settlement:
          $ref: '#/components/schemas/merchant.SettlementPreference'
        widget:
          $ref: '#/components/schemas/merchant.WidgetPreference'
      example:
        widget:
          only_stable_coins: true
        domain: domain
        merchant_id: merchant_id
        settlement:
          settle_to_payment_currency: true
          pass_fees_to_customer: true
    merchant.SettlementPreference:
      type: object
      properties:
        pass_fees_to_customer:
          type: boolean
          description: "who gets the 1% charge, the merchant or the customer\nif true,\
            \ the fee will be added to the amount the user wants to pay"
        settle_to_payment_currency:
          type: boolean
          description: "SettleToPaymentCurrency determines how settlement works. If\
            \ set to\ntrue, when a merchant is paid with USDT, the merchant USDT balance\n\
            will be topped up\nIf set to false, the fiat equivalent will be given\
            \ to the user"
      example:
        settle_to_payment_currency: true
        pass_fees_to_customer: true
    merchant.Transaction:
      type: object
      properties:
        amount:
          type: integer
        created_at:
          type: string
        customer:
          $ref: '#/components/schemas/merchant.MerchantCustomer'
        domain:
          type: string
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/merchant.TransactionMetadata'
        payment_link_id:
          type: string
        reference:
          type: string
        status:
          type: string
        updated_at:
          type: string
      example:
        reference: reference
        amount: 5
        metadata:
          widget_coins:
          - amount: 1
            code: code
            human_readable_amount: human_readable_amount
            fiat_exchange_rate: 1
            is_stable_coin: true
            logo: logo
            human_readable_name: human_readable_name
            networks:
            - address: address
              name: name
              memo: memo
              destination_tag: 1
            - address: address
              name: name
              memo: memo
              destination_tag: 1
          - amount: 1
            code: code
            human_readable_amount: human_readable_amount
            fiat_exchange_rate: 1
            is_stable_coin: true
            logo: logo
            human_readable_name: human_readable_name
            networks:
            - address: address
              name: name
              memo: memo
              destination_tag: 1
            - address: address
              name: name
              memo: memo
              destination_tag: 1
          data: {}
          is_widget_payment: true
          provider: provider
          fee:
            amount: 2
            currency: currency
          ip: ip
          payment:
            amount: 9
            refund_status: 7
            human_readable_amount: 2.027123023002322
            refund_amount: 4
            coin: 3
          onchain:
            to_address: to_address
            confirmations: 7
            from_address: from_address
            hash: hash
            coin: coin
        updated_at: updated_at
        payment_link_id: payment_link_id
        domain: domain
        created_at: created_at
        id: id
        customer:
          reference: reference
          full_name: full_name
          updated_at: updated_at
          domain: domain
          created_at: created_at
          is_blacklisted: true
          phone_number: phone_number
          id: id
          merchant_id: merchant_id
          email: email
        status: status
    merchant.TransactionMetadata:
      type: object
      properties:
        data:
          type: object
          description: Data contains key/value pair that gets sent from the SDK
        fee:
          $ref: '#/components/schemas/merchant.TransactionMetadata_fee'
        ip:
          type: string
        is_widget_payment:
          type: boolean
          description: Determines if this payment was done by Fluidcoins widget
        onchain:
          $ref: '#/components/schemas/merchant.TransactionMetadata_onchain'
        payment:
          $ref: '#/components/schemas/merchant.TransactionMetadata_payment'
        provider:
          type: string
        widget_coins:
          type: array
          items:
            $ref: '#/components/schemas/merchant.WidgetCoin'
      example:
        widget_coins:
        - amount: 1
          code: code
          human_readable_amount: human_readable_amount
          fiat_exchange_rate: 1
          is_stable_coin: true
          logo: logo
          human_readable_name: human_readable_name
          networks:
          - address: address
            name: name
            memo: memo
            destination_tag: 1
          - address: address
            name: name
            memo: memo
            destination_tag: 1
        - amount: 1
          code: code
          human_readable_amount: human_readable_amount
          fiat_exchange_rate: 1
          is_stable_coin: true
          logo: logo
          human_readable_name: human_readable_name
          networks:
          - address: address
            name: name
            memo: memo
            destination_tag: 1
          - address: address
            name: name
            memo: memo
            destination_tag: 1
        data: {}
        is_widget_payment: true
        provider: provider
        fee:
          amount: 2
          currency: currency
        ip: ip
        payment:
          amount: 9
          refund_status: 7
          human_readable_amount: 2.027123023002322
          refund_amount: 4
          coin: 3
        onchain:
          to_address: to_address
          confirmations: 7
          from_address: from_address
          hash: hash
          coin: coin
    merchant.Webhook:
      type: object
      properties:
        created_at:
          type: string
        domain:
          type: string
        endpoint:
          type: string
        id:
          type: string
        is_enabled:
          type: boolean
          description: IsEnabled is the currently active webhook
        merchant_id:
          type: string
        reference:
          type: string
        secret:
          type: string
        updated_at:
          type: string
      example:
        is_enabled: true
        reference: reference
        endpoint: endpoint
        updated_at: updated_at
        domain: domain
        created_at: created_at
        id: id
        merchant_id: merchant_id
        secret: secret
    merchant.WidgetCoin:
      type: object
      properties:
        amount:
          type: integer
        code:
          type: string
        fiat_exchange_rate:
          type: integer
        human_readable_amount:
          type: string
        human_readable_name:
          type: string
        is_stable_coin:
          type: boolean
        logo:
          type: string
        networks:
          type: array
          items:
            $ref: '#/components/schemas/merchant.WidgetCoinNetwork'
      example:
        amount: 1
        code: code
        human_readable_amount: human_readable_amount
        fiat_exchange_rate: 1
        is_stable_coin: true
        logo: logo
        human_readable_name: human_readable_name
        networks:
        - address: address
          name: name
          memo: memo
          destination_tag: 1
        - address: address
          name: name
          memo: memo
          destination_tag: 1
    merchant.WidgetCoinNetwork:
      type: object
      properties:
        address:
          type: string
        destination_tag:
          type: integer
        memo:
          type: string
        name:
          type: string
      example:
        address: address
        name: name
        memo: memo
        destination_tag: 1
    merchant.WidgetInitilizationOptions:
      type: object
      properties:
        coins:
          type: array
          items:
            $ref: '#/components/schemas/merchant.WidgetCoin'
        payment_methods:
          type: array
          items:
            $ref: '#/components/schemas/merchant.WidgetPaymentMethod'
        transaction:
          $ref: '#/components/schemas/merchant.WidgetTransaction'
    merchant.WidgetPaymentMethod:
      type: object
      properties:
        is_enabled:
          type: boolean
        method:
          type: string
        slug:
          type: string
    merchant.WidgetPreference:
      type: object
      properties:
        only_stable_coins:
          type: boolean
      example:
        only_stable_coins: true
    merchant.WidgetTransaction:
      type: object
      properties:
        amount:
          type: integer
          description: |-
            Value of transaction in Merchant =currency
            Usually Naira
        currency:
          type: string
        exchange_rate:
          type: integer
        fee:
          type: integer
        id:
          type: string
        merchant:
          $ref: '#/components/schemas/merchant.WidgetTransaction_merchant'
        reference:
          type: string
    server.APIError:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
    server.APIStatus:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
    server.addressListResponse:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/merchant.PaymentAddress'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        meta:
          $ref: '#/components/schemas/server.meta'
        status:
          type: boolean
      example:
        addresses:
        - reference: reference
          metadata:
            memo: memo
            destination_tag: 5
            network: network
          address: address
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          transaction:
            reference: reference
            amount: 5
            metadata:
              widget_coins:
              - amount: 1
                code: code
                human_readable_amount: human_readable_amount
                fiat_exchange_rate: 1
                is_stable_coin: true
                logo: logo
                human_readable_name: human_readable_name
                networks:
                - address: address
                  name: name
                  memo: memo
                  destination_tag: 1
                - address: address
                  name: name
                  memo: memo
                  destination_tag: 1
              - amount: 1
                code: code
                human_readable_amount: human_readable_amount
                fiat_exchange_rate: 1
                is_stable_coin: true
                logo: logo
                human_readable_name: human_readable_name
                networks:
                - address: address
                  name: name
                  memo: memo
                  destination_tag: 1
                - address: address
                  name: name
                  memo: memo
                  destination_tag: 1
              data: {}
              is_widget_payment: true
              provider: provider
              fee:
                amount: 2
                currency: currency
              ip: ip
              payment:
                amount: 9
                refund_status: 7
                human_readable_amount: 2.027123023002322
                refund_amount: 4
                coin: 3
              onchain:
                to_address: to_address
                confirmations: 7
                from_address: from_address
                hash: hash
                coin: coin
            updated_at: updated_at
            payment_link_id: payment_link_id
            domain: domain
            created_at: created_at
            id: id
            customer:
              reference: reference
              full_name: full_name
              updated_at: updated_at
              domain: domain
              created_at: created_at
              is_blacklisted: true
              phone_number: phone_number
              id: id
              merchant_id: merchant_id
              email: email
            status: status
          coin:
            image: image
            metadata:
              minimum_payout_amount: 6
              minimum_deposit_amount: 0
              payout_fee: 1
            code: code
            updated_at: updated_at
            has_test_net: true
            is_available_on_widget: true
            is_stable_coin: true
            created_at: created_at
            human_readable_name: human_readable_name
            id: id
            networks:
            - networks
            - networks
            is_fiat: true
        - reference: reference
          metadata:
            memo: memo
            destination_tag: 5
            network: network
          address: address
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          transaction:
            reference: reference
            amount: 5
            metadata:
              widget_coins:
              - amount: 1
                code: code
                human_readable_amount: human_readable_amount
                fiat_exchange_rate: 1
                is_stable_coin: true
                logo: logo
                human_readable_name: human_readable_name
                networks:
                - address: address
                  name: name
                  memo: memo
                  destination_tag: 1
                - address: address
                  name: name
                  memo: memo
                  destination_tag: 1
              - amount: 1
                code: code
                human_readable_amount: human_readable_amount
                fiat_exchange_rate: 1
                is_stable_coin: true
                logo: logo
                human_readable_name: human_readable_name
                networks:
                - address: address
                  name: name
                  memo: memo
                  destination_tag: 1
                - address: address
                  name: name
                  memo: memo
                  destination_tag: 1
              data: {}
              is_widget_payment: true
              provider: provider
              fee:
                amount: 2
                currency: currency
              ip: ip
              payment:
                amount: 9
                refund_status: 7
                human_readable_amount: 2.027123023002322
                refund_amount: 4
                coin: 3
              onchain:
                to_address: to_address
                confirmations: 7
                from_address: from_address
                hash: hash
                coin: coin
            updated_at: updated_at
            payment_link_id: payment_link_id
            domain: domain
            created_at: created_at
            id: id
            customer:
              reference: reference
              full_name: full_name
              updated_at: updated_at
              domain: domain
              created_at: created_at
              is_blacklisted: true
              phone_number: phone_number
              id: id
              merchant_id: merchant_id
              email: email
            status: status
          coin:
            image: image
            metadata:
              minimum_payout_amount: 6
              minimum_deposit_amount: 0
              payout_fee: 1
            code: code
            updated_at: updated_at
            has_test_net: true
            is_available_on_widget: true
            is_stable_coin: true
            created_at: created_at
            human_readable_name: human_readable_name
            id: id
            networks:
            - networks
            - networks
            is_fiat: true
        meta:
          paging:
            per_page: 7
            total: 1
            page: 6
        message: message
        status: true
    server.addressResponse:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/merchant.Address'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        address:
          reference: reference
          metadata:
            memo: memo
            destination_tag: 5
            network: network
          address: address
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          coin:
            image: image
            metadata:
              minimum_payout_amount: 6
              minimum_deposit_amount: 0
              payout_fee: 1
            code: code
            updated_at: updated_at
            has_test_net: true
            is_available_on_widget: true
            is_stable_coin: true
            created_at: created_at
            human_readable_name: human_readable_name
            id: id
            networks:
            - networks
            - networks
            is_fiat: true
        message: message
        status: true
    server.addressTransactionResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        transaction:
          $ref: '#/components/schemas/merchant.AddressTransaction'
      example:
        message: message
        transaction:
          reference: reference
          amount: 0
          metadata:
            block_hash: block_hash
            from: from
            block_height: 6
          updated_at: updated_at
          domain: domain
          payment_address_id: payment_address_id
          created_at: created_at
          id: id
          hash: hash
          coin:
            image: image
            metadata:
              minimum_payout_amount: 6
              minimum_deposit_amount: 0
              payout_fee: 1
            code: code
            updated_at: updated_at
            has_test_net: true
            is_available_on_widget: true
            is_stable_coin: true
            created_at: created_at
            human_readable_name: human_readable_name
            id: id
            networks:
            - networks
            - networks
            is_fiat: true
        status: true
    server.addressTransactionsListResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        meta:
          $ref: '#/components/schemas/server.meta'
        status:
          type: boolean
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/merchant.AddressTransaction'
      example:
        meta:
          paging:
            per_page: 7
            total: 1
            page: 6
        message: message
        transactions:
        - reference: reference
          amount: 0
          metadata:
            block_hash: block_hash
            from: from
            block_height: 6
          updated_at: updated_at
          domain: domain
          payment_address_id: payment_address_id
          created_at: created_at
          id: id
          hash: hash
          coin:
            image: image
            metadata:
              minimum_payout_amount: 6
              minimum_deposit_amount: 0
              payout_fee: 1
            code: code
            updated_at: updated_at
            has_test_net: true
            is_available_on_widget: true
            is_stable_coin: true
            created_at: created_at
            human_readable_name: human_readable_name
            id: id
            networks:
            - networks
            - networks
            is_fiat: true
        - reference: reference
          amount: 0
          metadata:
            block_hash: block_hash
            from: from
            block_height: 6
          updated_at: updated_at
          domain: domain
          payment_address_id: payment_address_id
          created_at: created_at
          id: id
          hash: hash
          coin:
            image: image
            metadata:
              minimum_payout_amount: 6
              minimum_deposit_amount: 0
              payout_fee: 1
            code: code
            updated_at: updated_at
            has_test_net: true
            is_available_on_widget: true
            is_stable_coin: true
            created_at: created_at
            human_readable_name: human_readable_name
            id: id
            networks:
            - networks
            - networks
            is_fiat: true
        status: true
    server.apiKeysResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/merchant.APIKey'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        keys:
        - key_type: 0
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          value: value
        - key_type: 0
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          value: value
        message: message
        status: true
    server.bankListResponse:
      type: object
      properties:
        banks:
          type: array
          items:
            $ref: '#/components/schemas/merchant.Bank'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        banks:
        - country: country
          code: code
          name: name
        - country: country
          code: code
          name: name
        message: message
        status: true
    server.complianceDataResponse:
      type: object
      properties:
        industries:
          type: array
          items:
            $ref: '#/components/schemas/merchant.Industry'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        uploader:
          $ref: '#/components/schemas/server.complianceDataResponse_uploader'
      example:
        uploader:
          expiration: 0
          secret: secret
        industries:
        - industry_name: industry_name
          updated_at: updated_at
          created_at: created_at
          id: id
        - industry_name: industry_name
          updated_at: updated_at
          created_at: created_at
          id: id
        message: message
        status: true
    server.createPayoutAccountRequest:
      type: object
      properties:
        bank:
          $ref: '#/components/schemas/server.createPayoutAccountRequest_bank'
        crypto:
          $ref: '#/components/schemas/server.createPayoutAccountRequest_crypto'
        currency:
          type: string
    server.createPayoutAccountResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        payout:
          $ref: '#/components/schemas/merchant.PayoutAccount'
        status:
          type: boolean
      example:
        payout:
          reference: reference
          bank:
            account_number: account_number
            bank_code: bank_code
            metadata: {}
            account_name: account_name
            bank_name: bank_name
            currency: currency
          coin_id: coin_id
          updated_at: updated_at
          domain: domain
          created_at: created_at
          payout_type: 0
          id: id
          merchant_id: merchant_id
          crypto:
            address: address
            label: label
            coin: coin
            network: network
        message: message
        status: true
    server.createRequestPayout:
      type: object
      properties:
        amount:
          type: integer
          description: "Amount to be sent to the recipient. Please note that this\
            \ is should\nbe in the currency's lowest denomination.\n1,000 Naira would\
            \ be 100000 while 1 BTC would be 100 million satoshis\nThe currency is\
            \ automatically retrieved from the payout account"
        recipient:
          type: string
          description: "The reference of the payout account, PAY_ACCT_XYZ"
    server.currenciesListResponse:
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/merchant.MerchantCoin'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        message: message
        currencies:
        - image: image
          metadata:
            minimum_payout_amount: 6
            minimum_deposit_amount: 0
            payout_fee: 1
          code: code
          updated_at: updated_at
          has_test_net: true
          is_available_on_widget: true
          is_stable_coin: true
          created_at: created_at
          human_readable_name: human_readable_name
          id: id
          networks:
          - networks
          - networks
          is_fiat: true
        - image: image
          metadata:
            minimum_payout_amount: 6
            minimum_deposit_amount: 0
            payout_fee: 1
          code: code
          updated_at: updated_at
          has_test_net: true
          is_available_on_widget: true
          is_stable_coin: true
          created_at: created_at
          human_readable_name: human_readable_name
          id: id
          networks:
          - networks
          - networks
          is_fiat: true
        status: true
    server.customerCreateRequest:
      type: object
      properties:
        email:
          type: string
        full_name:
          type: string
        phone:
          $ref: '#/components/schemas/server.customerCreateRequest_phone'
    server.customerCreateResponse:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/merchant.MerchantCustomer'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        message: message
        customer:
          reference: reference
          full_name: full_name
          updated_at: updated_at
          domain: domain
          created_at: created_at
          is_blacklisted: true
          phone_number: phone_number
          id: id
          merchant_id: merchant_id
          email: email
        status: true
    server.customerEditRequest:
      type: object
      properties:
        email:
          type: string
        full_name:
          type: string
        phone:
          $ref: server.customerCreateRequest_phone
    server.customerListResponse:
      type: object
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/merchant.MerchantCustomer'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        meta:
          $ref: '#/components/schemas/server.meta'
        status:
          type: boolean
      example:
        meta:
          paging:
            per_page: 7
            total: 1
            page: 6
        customers:
        - reference: reference
          full_name: full_name
          updated_at: updated_at
          domain: domain
          created_at: created_at
          is_blacklisted: true
          phone_number: phone_number
          id: id
          merchant_id: merchant_id
          email: email
        - reference: reference
          full_name: full_name
          updated_at: updated_at
          domain: domain
          created_at: created_at
          is_blacklisted: true
          phone_number: phone_number
          id: id
          merchant_id: merchant_id
          email: email
        message: message
        status: true
    server.customerRetrievalResponse:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/merchant.MerchantCustomer'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        message: message
        customer:
          reference: reference
          full_name: full_name
          updated_at: updated_at
          domain: domain
          created_at: created_at
          is_blacklisted: true
          phone_number: phone_number
          id: id
          merchant_id: merchant_id
          email: email
        status: true
    server.generateCoinRequest:
      type: object
      properties:
        code:
          type: string
          description: "Code for the coin you want to generate an address for. e.g\
            \ (XLM, USDC)"
        network:
          type: string
          description: "erc20,trc20,bsc and others"
    server.homeResponse:
      type: object
      properties:
        balances:
          type: array
          items:
            $ref: server.homeResponse_balances
        graph:
          type: array
          items:
            $ref: server.homeResponse_graph
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        transactions:
          type: array
          items:
            $ref: server.homeResponse_transactions
      example:
        balances:
        - amount: 0
          human_readable_amount: 6.027456183070403
          coin: coin
        - amount: 0
          human_readable_amount: 6.027456183070403
          coin: coin
        message: message
        transactions:
        - date: date
          reference: reference
          amount: 5
          customer_name: customer_name
          status: status
        - date: date
          reference: reference
          amount: 5
          customer_name: customer_name
          status: status
        graph:
        - date: date
          count: 1
        - date: date
          count: 1
        status: true
    server.initWidgetTransactionRequest:
      type: object
      properties:
        amount:
          type: integer
          description: Amount. Must be formatte in Kobo. Minimum of 500 Naira
        api_key:
          type: string
          description: Public key only. Never pass your secret key here
        customer_name:
          type: string
          description: |-
            Not required. But the customer name. SDK shoudl allow people set this
            or not
        email:
          type: string
          description: Customer email. Required
        metadata:
          type: object
          description: Key value pair of arbitrary data you want to attach to this
            request
        payment_link_id:
          type: string
          description: "If coming from a payment page. Put the id of the payment page\
            \ here.\nIf this is set, it will use the amount from the payment page\
            \ instead\nand disregard the amount field in this request"
        phone:
          type: string
        reference:
          type: string
    server.linkCreateRequest:
      type: object
      properties:
        amount:
          type: integer
        collect_phone_number:
          type: boolean
        description:
          type: string
        title:
          type: string
    server.linkEditRequest:
      type: object
      properties:
        amount:
          type: integer
        collect_phone_number:
          type: boolean
        description:
          type: string
        title:
          type: string
    server.listWebhookResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/merchant.Webhook'
      example:
        webhooks:
        - is_enabled: true
          reference: reference
          endpoint: endpoint
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          secret: secret
        - is_enabled: true
          reference: reference
          endpoint: endpoint
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          secret: secret
        message: message
        status: true
    server.merchantBalanceResponse:
      type: object
      properties:
        balances:
          type: array
          items:
            $ref: '#/components/schemas/merchant.MerchantWallet'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        balances:
        - amount: 0
          coin_id: coin_id
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          coin:
            image: image
            metadata:
              minimum_payout_amount: 6
              minimum_deposit_amount: 0
              payout_fee: 1
            code: code
            updated_at: updated_at
            has_test_net: true
            is_available_on_widget: true
            is_stable_coin: true
            created_at: created_at
            human_readable_name: human_readable_name
            id: id
            networks:
            - networks
            - networks
            is_fiat: true
        - amount: 0
          coin_id: coin_id
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          coin:
            image: image
            metadata:
              minimum_payout_amount: 6
              minimum_deposit_amount: 0
              payout_fee: 1
            code: code
            updated_at: updated_at
            has_test_net: true
            is_available_on_widget: true
            is_stable_coin: true
            created_at: created_at
            human_readable_name: human_readable_name
            id: id
            networks:
            - networks
            - networks
            is_fiat: true
        message: message
        status: true
    server.merchantCreateRequest:
      type: object
      properties:
        description:
          type: string
        industry:
          type: string
        name:
          type: string
        verification_type:
          type: integer
    server.merchantCreationResponse:
      type: object
      properties:
        merchant:
          $ref: '#/components/schemas/merchant.Merchant'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        user:
          $ref: '#/components/schemas/merchant.MerchantUser'
      example:
        merchant:
          business_name: business_name
          country:
            code: code
            id: id
            english_name: english_name
          industry_id: industry_id
          metadata:
            webhook_application_id: webhook_application_id
            live_webhook_application_id: live_webhook_application_id
            plan:
              percentage: 0
            email: email
          dashboard_domain: dashboard_domain
          updated_at: updated_at
          created_at: created_at
          description: description
          verification_type: 1
          id: id
          verification_status: 6
          country_id: country_id
        message: message
        user:
          country: null
          password: password
          full_name: full_name
          is_active: true
          updated_at: updated_at
          is_email_verified: true
          roles:
          - role: 5
            updated_at: updated_at
            user_id: user_id
            created_at: created_at
            counter: 5
            id: id
            merchant_id: merchant_id
          - role: 5
            updated_at: updated_at
            user_id: user_id
            created_at: created_at
            counter: 5
            id: id
            merchant_id: merchant_id
          created_at: created_at
          id: id
          country_id: country_id
          email: email
        status: true
    server.merchantUserAuthenticationResponse:
      type: object
      properties:
        merchant:
          $ref: '#/components/schemas/merchant.Merchant'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        token:
          type: string
        user:
          $ref: '#/components/schemas/merchant.MerchantUser'
    server.merchantUserCreateResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        token:
          type: string
        user:
          $ref: '#/components/schemas/merchant.MerchantUser'
    server.merchantUserResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        user:
          $ref: '#/components/schemas/merchant.MerchantUser'
      example:
        message: message
        user:
          country: null
          password: password
          full_name: full_name
          is_active: true
          updated_at: updated_at
          is_email_verified: true
          roles:
          - role: 5
            updated_at: updated_at
            user_id: user_id
            created_at: created_at
            counter: 5
            id: id
            merchant_id: merchant_id
          - role: 5
            updated_at: updated_at
            user_id: user_id
            created_at: created_at
            counter: 5
            id: id
            merchant_id: merchant_id
          created_at: created_at
          id: id
          country_id: country_id
          email: email
        status: true
    server.meta:
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/server.pagingInfo'
      example:
        paging:
          per_page: 7
          total: 1
          page: 6
    server.pagingInfo:
      type: object
      properties:
        page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
      example:
        per_page: 7
        total: 1
        page: 6
    server.paymentLinkCreateResponse:
      type: object
      properties:
        link:
          $ref: '#/components/schemas/merchant.PaymentLink'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        link:
          is_enabled: true
          identifier: identifier
          amount: 0
          metadata:
            collect_phone_number: true
          updated_at: updated_at
          domain: domain
          created_at: created_at
          description: description
          id: id
          merchant_id: merchant_id
          title: title
        message: message
        status: true
    server.paymentLinkRetrievalResponse:
      type: object
      properties:
        link:
          $ref: '#/components/schemas/merchant.PaymentLink'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        link:
          is_enabled: true
          identifier: identifier
          amount: 0
          metadata:
            collect_phone_number: true
          updated_at: updated_at
          domain: domain
          created_at: created_at
          description: description
          id: id
          merchant_id: merchant_id
          title: title
        message: message
        status: true
    server.payoutAccountsListResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/merchant.PayoutAccount'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        meta:
          $ref: '#/components/schemas/server.meta'
        status:
          type: boolean
      example:
        meta:
          paging:
            per_page: 7
            total: 1
            page: 6
        accounts:
        - reference: reference
          bank:
            account_number: account_number
            bank_code: bank_code
            metadata: {}
            account_name: account_name
            bank_name: bank_name
            currency: currency
          coin_id: coin_id
          updated_at: updated_at
          domain: domain
          created_at: created_at
          payout_type: 0
          id: id
          merchant_id: merchant_id
          crypto:
            address: address
            label: label
            coin: coin
            network: network
        - reference: reference
          bank:
            account_number: account_number
            bank_code: bank_code
            metadata: {}
            account_name: account_name
            bank_name: bank_name
            currency: currency
          coin_id: coin_id
          updated_at: updated_at
          domain: domain
          created_at: created_at
          payout_type: 0
          id: id
          merchant_id: merchant_id
          crypto:
            address: address
            label: label
            coin: coin
            network: network
        message: message
        status: true
    server.payoutListResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        meta:
          $ref: '#/components/schemas/server.meta'
        payouts:
          type: array
          items:
            $ref: '#/components/schemas/merchant.Payout'
        status:
          type: boolean
      example:
        payouts:
        - reference: reference
          amount: 0
          metadata:
            bank:
              account_number: account_number
              bank_code: bank_code
              metadata: {}
              account_name: account_name
              bank_name: bank_name
              currency: currency
            fee:
              amount: 6
              coin: 1
            crypto:
              address: address
              label: label
              coin: coin
              network: network
          coin_id: coin_id
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          type: 5
          status: 5
        - reference: reference
          amount: 0
          metadata:
            bank:
              account_number: account_number
              bank_code: bank_code
              metadata: {}
              account_name: account_name
              bank_name: bank_name
              currency: currency
            fee:
              amount: 6
              coin: 1
            crypto:
              address: address
              label: label
              coin: coin
              network: network
          coin_id: coin_id
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          type: 5
          status: 5
        meta:
          paging:
            per_page: 7
            total: 1
            page: 6
        message: message
        status: true
    server.payoutRequestResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        payout:
          $ref: '#/components/schemas/merchant.Payout'
        status:
          type: boolean
      example:
        payout:
          reference: reference
          amount: 0
          metadata:
            bank:
              account_number: account_number
              bank_code: bank_code
              metadata: {}
              account_name: account_name
              bank_name: bank_name
              currency: currency
            fee:
              amount: 6
              coin: 1
            crypto:
              address: address
              label: label
              coin: coin
              network: network
          coin_id: coin_id
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          type: 5
          status: 5
        message: message
        status: true
    server.preferenceUpdateRequest:
      type: object
      properties:
        settlement:
          $ref: '#/components/schemas/merchant.SettlementPreference'
        widget:
          $ref: '#/components/schemas/merchant.WidgetPreference'
    server.preferencesResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        preferences:
          $ref: '#/components/schemas/merchant.Preferences'
        status:
          type: boolean
      example:
        preferences:
          widget:
            only_stable_coins: true
          domain: domain
          merchant_id: merchant_id
          settlement:
            settle_to_payment_currency: true
            pass_fees_to_customer: true
        message: message
        status: true
    server.publicPaymentLinkResponse:
      type: object
      properties:
        link:
          $ref: '#/components/schemas/server.publicPaymentLinkResponse_link'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
    server.rateData:
      type: object
      properties:
        buy_rate:
          type: integer
          description: |-
            BuyRate is the rate at which we will convert the from currency to the
            "to" currency
        from:
          $ref: '#/components/schemas/server.rateData_from'
        human_readable_amount:
          type: number
          description: Deprecated. please see HumanReadableBuyRate and HumanReadableSaleRate
        human_readable_buy_rate:
          type: number
        human_readable_sale_rate:
          type: number
        pair:
          type: string
        rate:
          type: integer
          description: "Deprecated, please use out BuyRate and SaleRate"
        sale_rate:
          type: integer
          description: |-
            SaleRate is the rate at which we will convert the "to" currency to
            the "from" currency
        to:
          $ref: server.rateData_from
      example:
        sale_rate: 2
        human_readable_amount: 6.027456183070403
        rate: 5
        human_readable_buy_rate: 1.4658129805029452
        from:
          code: code
          human_readable_name: human_readable_name
        to:
          code: code
          human_readable_name: human_readable_name
        human_readable_sale_rate: 5.962133916683182
        pair: pair
        buy_rate: 0
    server.ratesResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        rates:
          type: array
          items:
            $ref: '#/components/schemas/server.rateData'
        status:
          type: boolean
      example:
        rates:
        - sale_rate: 2
          human_readable_amount: 6.027456183070403
          rate: 5
          human_readable_buy_rate: 1.4658129805029452
          from:
            code: code
            human_readable_name: human_readable_name
          to:
            code: code
            human_readable_name: human_readable_name
          human_readable_sale_rate: 5.962133916683182
          pair: pair
          buy_rate: 0
        - sale_rate: 2
          human_readable_amount: 6.027456183070403
          rate: 5
          human_readable_buy_rate: 1.4658129805029452
          from:
            code: code
            human_readable_name: human_readable_name
          to:
            code: code
            human_readable_name: human_readable_name
          human_readable_sale_rate: 5.962133916683182
          pair: pair
          buy_rate: 0
        message: message
        status: true
    server.resolveBankAccountResponse:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/server.resolveBankAccountResponse_account'
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
      example:
        message: message
        account:
          name: name
        status: true
    server.simulateWidgetPayment:
      type: object
      properties:
        reference:
          type: string
        type:
          type: string
    server.transactionItemResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        transaction:
          $ref: '#/components/schemas/merchant.Transaction'
      example:
        message: message
        transaction:
          reference: reference
          amount: 5
          metadata:
            widget_coins:
            - amount: 1
              code: code
              human_readable_amount: human_readable_amount
              fiat_exchange_rate: 1
              is_stable_coin: true
              logo: logo
              human_readable_name: human_readable_name
              networks:
              - address: address
                name: name
                memo: memo
                destination_tag: 1
              - address: address
                name: name
                memo: memo
                destination_tag: 1
            - amount: 1
              code: code
              human_readable_amount: human_readable_amount
              fiat_exchange_rate: 1
              is_stable_coin: true
              logo: logo
              human_readable_name: human_readable_name
              networks:
              - address: address
                name: name
                memo: memo
                destination_tag: 1
              - address: address
                name: name
                memo: memo
                destination_tag: 1
            data: {}
            is_widget_payment: true
            provider: provider
            fee:
              amount: 2
              currency: currency
            ip: ip
            payment:
              amount: 9
              refund_status: 7
              human_readable_amount: 2.027123023002322
              refund_amount: 4
              coin: 3
            onchain:
              to_address: to_address
              confirmations: 7
              from_address: from_address
              hash: hash
              coin: coin
          updated_at: updated_at
          payment_link_id: payment_link_id
          domain: domain
          created_at: created_at
          id: id
          customer:
            reference: reference
            full_name: full_name
            updated_at: updated_at
            domain: domain
            created_at: created_at
            is_blacklisted: true
            phone_number: phone_number
            id: id
            merchant_id: merchant_id
            email: email
          status: status
        status: true
    server.transactionStatus:
      type: object
      properties:
        amount:
          type: integer
        coin:
          type: string
        human_readable_amount:
          type: number
        overpaid:
          type: boolean
        paid_in_full:
          type: boolean
        reference:
          type: string
        underpaid:
          type: boolean
    server.transactionStatusResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        transaction:
          $ref: '#/components/schemas/server.transactionStatus'
    server.transactionsListResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        meta:
          $ref: '#/components/schemas/server.meta'
        status:
          type: boolean
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/merchant.Transaction'
      example:
        meta:
          paging:
            per_page: 7
            total: 1
            page: 6
        message: message
        transactions:
        - reference: reference
          amount: 5
          metadata:
            widget_coins:
            - amount: 1
              code: code
              human_readable_amount: human_readable_amount
              fiat_exchange_rate: 1
              is_stable_coin: true
              logo: logo
              human_readable_name: human_readable_name
              networks:
              - address: address
                name: name
                memo: memo
                destination_tag: 1
              - address: address
                name: name
                memo: memo
                destination_tag: 1
            - amount: 1
              code: code
              human_readable_amount: human_readable_amount
              fiat_exchange_rate: 1
              is_stable_coin: true
              logo: logo
              human_readable_name: human_readable_name
              networks:
              - address: address
                name: name
                memo: memo
                destination_tag: 1
              - address: address
                name: name
                memo: memo
                destination_tag: 1
            data: {}
            is_widget_payment: true
            provider: provider
            fee:
              amount: 2
              currency: currency
            ip: ip
            payment:
              amount: 9
              refund_status: 7
              human_readable_amount: 2.027123023002322
              refund_amount: 4
              coin: 3
            onchain:
              to_address: to_address
              confirmations: 7
              from_address: from_address
              hash: hash
              coin: coin
          updated_at: updated_at
          payment_link_id: payment_link_id
          domain: domain
          created_at: created_at
          id: id
          customer:
            reference: reference
            full_name: full_name
            updated_at: updated_at
            domain: domain
            created_at: created_at
            is_blacklisted: true
            phone_number: phone_number
            id: id
            merchant_id: merchant_id
            email: email
          status: status
        - reference: reference
          amount: 5
          metadata:
            widget_coins:
            - amount: 1
              code: code
              human_readable_amount: human_readable_amount
              fiat_exchange_rate: 1
              is_stable_coin: true
              logo: logo
              human_readable_name: human_readable_name
              networks:
              - address: address
                name: name
                memo: memo
                destination_tag: 1
              - address: address
                name: name
                memo: memo
                destination_tag: 1
            - amount: 1
              code: code
              human_readable_amount: human_readable_amount
              fiat_exchange_rate: 1
              is_stable_coin: true
              logo: logo
              human_readable_name: human_readable_name
              networks:
              - address: address
                name: name
                memo: memo
                destination_tag: 1
              - address: address
                name: name
                memo: memo
                destination_tag: 1
            data: {}
            is_widget_payment: true
            provider: provider
            fee:
              amount: 2
              currency: currency
            ip: ip
            payment:
              amount: 9
              refund_status: 7
              human_readable_amount: 2.027123023002322
              refund_amount: 4
              coin: 3
            onchain:
              to_address: to_address
              confirmations: 7
              from_address: from_address
              hash: hash
              coin: coin
          updated_at: updated_at
          payment_link_id: payment_link_id
          domain: domain
          created_at: created_at
          id: id
          customer:
            reference: reference
            full_name: full_name
            updated_at: updated_at
            domain: domain
            created_at: created_at
            is_blacklisted: true
            phone_number: phone_number
            id: id
            merchant_id: merchant_id
            email: email
          status: status
        status: true
    server.updatePasswordRequest:
      type: object
      properties:
        confirm_password:
          type: string
        current_password:
          type: string
        new_password:
          type: string
    server.updateUserProfileRequest:
      type: object
      properties:
        email:
          type: string
        full_name:
          type: string
    server.userAuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    server.userCreateRequest:
      type: object
      properties:
        confirm_password:
          type: string
        country:
          type: string
        email:
          type: string
        full_name:
          type: string
        password:
          type: string
        terms_and_conditions:
          type: boolean
    server.webhookCreateRequest:
      type: object
      properties:
        endpoint:
          type: string
    server.webhookCreateResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        webhook:
          $ref: '#/components/schemas/merchant.Webhook'
      example:
        webhook:
          is_enabled: true
          reference: reference
          endpoint: endpoint
          updated_at: updated_at
          domain: domain
          created_at: created_at
          id: id
          merchant_id: merchant_id
          secret: secret
        message: message
        status: true
    server.widgetInitalizationResponse:
      type: object
      properties:
        message:
          type: string
          description: Generic message that tells you the status of the operation
        status:
          type: boolean
        widget:
          $ref: '#/components/schemas/merchant.WidgetInitilizationOptions'
    merchant.MerchantCoin_metadata:
      type: object
      properties:
        minimum_deposit_amount:
          type: integer
          description: |-
            The minimum amount we can take for deposits for this coin
            NOT implemented
        minimum_payout_amount:
          type: integer
        payout_fee:
          type: integer
      example:
        minimum_payout_amount: 6
        minimum_deposit_amount: 0
        payout_fee: 1
    merchant.TransactionMetadata_fee:
      type: object
      properties:
        amount:
          type: integer
        currency:
          type: string
      example:
        amount: 2
        currency: currency
    merchant.TransactionMetadata_onchain:
      type: object
      properties:
        coin:
          type: string
        confirmations:
          type: integer
        from_address:
          type: string
        hash:
          type: string
        to_address:
          type: string
      example:
        to_address: to_address
        confirmations: 7
        from_address: from_address
        hash: hash
        coin: coin
    merchant.TransactionMetadata_payment:
      type: object
      properties:
        amount:
          type: integer
          description: Amount is what the user actually paid
        coin:
          type: integer
          description: The coin the user used to make payment
        human_readable_amount:
          type: number
        refund_amount:
          type: integer
        refund_status:
          type: integer
      example:
        amount: 9
        refund_status: 7
        human_readable_amount: 2.027123023002322
        refund_amount: 4
        coin: 3
    merchant.WidgetTransaction_merchant:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
    server.complianceDataResponse_uploader:
      type: object
      properties:
        expiration:
          type: integer
        secret:
          type: string
      example:
        expiration: 0
        secret: secret
    server.createPayoutAccountRequest_bank:
      type: object
      properties:
        account_number:
          type: string
        bank_code:
          type: string
    server.createPayoutAccountRequest_crypto:
      type: object
      properties:
        address:
          type: string
        coin:
          type: string
        label:
          type: string
        network:
          type: string
    server.customerCreateRequest_phone:
      type: object
      properties:
        code:
          type: string
        phone:
          type: string
    server.homeResponse_balances:
      type: object
      properties:
        amount:
          type: integer
        coin:
          type: string
        human_readable_amount:
          type: number
      example:
        amount: 0
        human_readable_amount: 6.027456183070403
        coin: coin
    server.homeResponse_graph:
      type: object
      properties:
        count:
          type: integer
        date:
          type: string
      example:
        date: date
        count: 1
    server.homeResponse_transactions:
      type: object
      properties:
        amount:
          type: integer
        customer_name:
          type: string
        date:
          type: string
        reference:
          type: string
        status:
          type: string
      example:
        date: date
        reference: reference
        amount: 5
        customer_name: customer_name
        status: status
    server.publicPaymentLinkResponse_link:
      type: object
      properties:
        amount:
          type: integer
        collect_phone_number:
          type: boolean
        description:
          type: string
        domain:
          type: string
        merchant_name:
          type: string
        public_key:
          type: string
        title:
          type: string
    server.rateData_from:
      type: object
      properties:
        code:
          type: string
        human_readable_name:
          type: string
      example:
        code: code
        human_readable_name: human_readable_name
    server.resolveBankAccountResponse_account:
      type: object
      properties:
        name:
          type: string
      example:
        name: name
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header
x-original-swagger-version: "2.0"
